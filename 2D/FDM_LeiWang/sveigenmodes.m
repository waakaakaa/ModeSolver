function [mE_Prof,neff,vcellE_Prof]=sveigenmodes(A,guess,nmodes,lambda,Nx,Ny,vNact,mdy,bIsDrawing)
%function [neff]=sveigenmodes(A,guess,nmodes,lambda,nx,ny);

% This function calcualtes and formate the eigenmodes for the semivectorial finite difference mode solver.
% It uses the MATLAB function eigs to calculates a few eigenmodes of the matrix A.


% Input:
% A ----- sparse matrix containing the finite difference representation og the difference operator for the mode solver, generated by avbuildmtx.m
% guess --- scalar shift to apply when calculating the eigenvalues. This routine will return the eigenpairs which are closeat th this guess in magnitude.
% nmodes ---- number of modes to be calculated.
% lambda --- wavelength
% Nx,Ny ---- dimension of finite difference mesh
% vNact ---- the vector denoting the active layers(quantum wells)
% mdy ---- the matrix denoting grid sizes in y direction

% Output:
% mE_Prof ---- the field profile of the fundamental mode
%
% neff --- vector of modal effective indices, neff(k) = effective index of kth eigenmode
%vcellE_Prof the field profile of all modes

global dx;
global dy;
shift = (2*pi*guess/lambda)^2;
options.tol = 1e-8;
options.disp = 0;
[v,d] = eigs(A,speye(size(A)),nmodes,shift,options);
neff = lambda*sqrt(diag(d))/(2*pi);
mE_Prof = reshape(v(:,1),[Nx Ny]);
mIn_prof = abs(mE_Prof).^2;% matrix of the modal intensity profile
vcellE_Prof = cell(nmodes,1);
for k=1:nmodes
    vcellE_Prof{k} = reshape(v(:,k),[Nx Ny]);
    if(bIsDrawing)
        s = reshape(abs(v(1:Nx*Ny,k)),[Nx Ny]);
        figure;
        pcolor((s.'));
        shading interp;
        colorbar;
        
        
        
        %     if k==1
        %          y = s.'/sqrt(max(max(abs(s.^2))));
        %         fid = fopen('field.m00', 'wt');
        %         fprintf(fid,'/rn,a,b/nx0/ls1\n/r,qa,qb\n%g %g %g 0 OUTPUT_REAL_3D 3.004203 0\n%g %g %g\n',Nx,-5,5,Ny,-0.5,3);
        %         for kk=1:Nx
        %             fprintf(fid, ' ');
        %             fprintf(fid, '%E  ', y(:,kk));
        %             fprintf(fid, '\n');
        %          end;
        %         fclose(fid)
        %     end
        
    end
end
%----------------------- calculated the confinement factor -----------------%
%Gama = CalGama(mIn_prof,dx,dy,Nx,Ny,vNact,mdy);